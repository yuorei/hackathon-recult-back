scalar Upload

type User implements Node{
  id: ID!
  name: String!
  email: String!
  password: String!
  profileImageURL: String
  gender: Gender
  affiliation: Affiliation
  groups: [Group!]
  skills: [Skill!]
}

enum Gender {
  MAN
  WOMAN
  OTHER
}

enum Affiliation {
  STUDENT
  OTHER
}

type Group implements Node{
  id: ID!
  name: String!
  description: String!
}

input createUserInput {
  name: String!
  email: String!
  password: String!
  profileImage: Upload
  gender: Gender
  affiliation: Affiliation
  groupName: String
}

type userPayload implements Node {
  id: ID!
  name: String!
  email: String!
  gender: Gender
  profileImageURL: String
  affiliation: Affiliation
  groups: [Group!]
  skills: [Skill!]
}

extend type Query {
  user(id: ID!): userPayload!
}

type Mutation {
  createUser(input: createUserInput!): userPayload!
}
