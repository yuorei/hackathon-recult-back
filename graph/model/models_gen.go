// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
	// 任意のID
	GetID() string
}

type Group struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (Group) IsNode() {}

// 任意のID
func (this Group) GetID() string { return this.ID }

type Skill struct {
	ID          string `json:"id"`
	Level       int    `json:"level"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (Skill) IsNode() {}

// 任意のID
func (this Skill) GetID() string { return this.ID }

type User struct {
	ID          string       `json:"id"`
	Name        string       `json:"name"`
	Mail        string       `json:"mail"`
	Password    string       `json:"password"`
	Gender      *Gender      `json:"gender,omitempty"`
	Affiliation *Affiliation `json:"affiliation,omitempty"`
	Groups      []*Group     `json:"groups,omitempty"`
	Skills      []*Skill     `json:"Skills,omitempty"`
}

func (User) IsNode() {}

// 任意のID
func (this User) GetID() string { return this.ID }

type CreateUserInput struct {
	Naem        string       `json:"naem"`
	Mail        string       `json:"mail"`
	Password    string       `json:"password"`
	Gender      *Gender      `json:"gender,omitempty"`
	Affiliation *Affiliation `json:"affiliation,omitempty"`
	GroupName   *string      `json:"GroupName,omitempty"`
}

type UserPayload struct {
	ID          string       `json:"id"`
	Name        string       `json:"name"`
	Mail        string       `json:"mail"`
	Gender      *Gender      `json:"gender,omitempty"`
	Affiliation *Affiliation `json:"affiliation,omitempty"`
	Groups      []*Group     `json:"groups,omitempty"`
	Skills      []*Skill     `json:"Skills,omitempty"`
}

func (UserPayload) IsNode() {}

// 任意のID
func (this UserPayload) GetID() string { return this.ID }

type Affiliation string

const (
	AffiliationStudent Affiliation = "STUDENT"
	AffiliationOther   Affiliation = "OTHER"
)

var AllAffiliation = []Affiliation{
	AffiliationStudent,
	AffiliationOther,
}

func (e Affiliation) IsValid() bool {
	switch e {
	case AffiliationStudent, AffiliationOther:
		return true
	}
	return false
}

func (e Affiliation) String() string {
	return string(e)
}

func (e *Affiliation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Affiliation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Affiliation", str)
	}
	return nil
}

func (e Affiliation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMan   Gender = "MAN"
	GenderWoman Gender = "WOMAN"
	GenderOther Gender = "OTHER"
)

var AllGender = []Gender{
	GenderMan,
	GenderWoman,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMan, GenderWoman, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
